{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","selectIndexs","setSelIndexs","selectLevel","setSelectLevel","text","id","levels","openMenu","setOpenMenu","anchorEl","setAnchorEl","menuOptions","sudokuRender","rows","setRows","isWin","setIsWin","checkErrors","setCheckErr","showHelp","setShowHelp","level_id","field","arr","sort","Math","random","row","i","push","substr","num","cantChange","handleClose","item","newRows","Object","assign","flag","errors","map","uniqueRow","unique","length","filter","col","j","uniqueCol","indR","indC","forEach","ind","square","uniqueSquare","checkWin","obj","keys","playAgain","div","rowHtml","indexRow","cell","indexCell","className","disabled","aria-owns","undefined","aria-haspopup","onClick","e","currentTarget","handleOpen","level","Icon","path","mdiHelpCircle","mdiClose","Menu","open","onClose","MenuItem","mdiEraserVariant","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e89a63fe.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { Icon } from '@mdi/react';\r\nimport {mdiEraserVariant, mdiHelpCircle, mdiClose} from '@mdi/js';\r\n\r\nfunction App() {\r\n    const [selectIndexs, setSelIndexs] = React.useState([-1, -1]);\r\n    const [selectLevel, setSelectLevel] = React.useState(3);\r\n    const [levels] = React.useState([{text: 'Простой', id: 3}, {text: 'Средний', id: 5}, {text: 'Сложный', id: 8}]);\r\n    const [openMenu, setOpenMenu] = React.useState(false);\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [menuOptions] = React.useState([[1, 2, 3], [4, 5, 6], [7, 8, 9]]);\r\n    const [rows, setRows] = React.useState(sudokuRender(3));\r\n    const [isWin, setIsWin] = React.useState(false);\r\n    const [checkErrors, setCheckErr] = React.useState(false);\r\n    const [showHelp, setShowHelp] = React.useState(false);\r\n\r\n    function sudokuRender(level_id) {\r\n        let rows = [];\r\n        let field = '';\r\n        switch (level_id){\r\n            case 3: field = '0681594327597283416342671589934157268278936145156842973729318654813465792465729831';\r\n            break;\r\n            case 5: field = '0937162845862754319451893267274519638615438972398276451786321594123945786549687123';\r\n            break;\r\n            case 8: field = '0473896152518427936926351487692514378185673294347289561761945823854732619239168745';\r\n        }\r\n        let arr = [1,2,3,4,6,7,5,8,9].sort(() => {return Math.random() - 0.5});\r\n        let row = [];\r\n        for (let i = 1; i < 82; i++) {\r\n            if (i % 9 === 1) row = [];\r\n            Math.random()*10 > level_id\r\n                ?\r\n                row.push({text: +arr[field.substr(i,1)-1], num: i - 1, cantChange: true})\r\n                    :\r\n                row.push({text: '', num: i - 1, cantChange: false});\r\n            if (i % 9 === 0) {\r\n                rows.push(row);\r\n            }\r\n        }\r\n        return rows;\r\n    }\r\n\r\n    function handleOpen(e, indexRow, indexCell) {\r\n        setAnchorEl(e.currentTarget);\r\n        setOpenMenu(true);\r\n        setSelIndexs([indexRow, indexCell]);\r\n    }\r\n\r\n    function changeLevel(level_id) {\r\n        setSelectLevel(level_id);\r\n        setRows(sudokuRender(level_id));\r\n        setCheckErr(false);\r\n    }\r\n\r\n    function handleClose(item) {\r\n        if (item !== null) {\r\n            let newRows = Object.assign([], rows);\r\n            newRows[selectIndexs[0]][selectIndexs[1]].text = item !== -1 ? item : '';\r\n            setRows(newRows);\r\n        }\r\n        setOpenMenu(false);\r\n        setAnchorEl(null);\r\n        checkWin();\r\n    }\r\n\r\n    function unique(arr) {\r\n        let obj = {};\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (arr[i].text !== '') {\r\n                let str = arr[i].text;\r\n                obj[str] = true;\r\n            }\r\n        }\r\n\r\n        return Object.keys(obj);\r\n    }\r\n\r\n    function checkWin() {\r\n        let flag = true;\r\n        let errors = false;\r\n        rows.map(row => {\r\n            let uniqueRow = unique(row);\r\n            if (uniqueRow.length !== row.length)\r\n                flag = false;\r\n            if (uniqueRow.length !== row.filter(item => item.text !== '').length)\r\n                errors = true;\r\n            return row;\r\n        });\r\n        for (let i = 0; i < 9; i++) {\r\n            let col = [];\r\n            for (let j = 0; j < 9; j++) {\r\n                col.push(rows[j][i]);\r\n            }\r\n            let uniqueCol = unique(col);\r\n            if (uniqueCol.length !== col.length)\r\n                flag = false;\r\n            if (uniqueCol.length !== col.filter(item => item.text !== '').length)\r\n                errors = true;\r\n        }\r\n        let indexes = [[0, 0], [0, 3], [0, 6], [3, 0], [3, 3], [3, 6], [6, 0], [6, 3], [6, 6]];\r\n        let indR = 0, indC = 0;\r\n        indexes.forEach(ind => {\r\n            [indR, indC] = ind;\r\n            let square = [];\r\n            for (let i = indR; i < indR + 3; i++) {\r\n                for (let j = indC; j < indC + 3; j++) {\r\n                    square.push(rows[i][j]);\r\n                }\r\n            }\r\n            let uniqueSquare = unique(square);\r\n            if (uniqueSquare.length !== square.length)\r\n                flag = false;\r\n            if (uniqueSquare.length !== square.filter(item => item.text !== '').length)\r\n                errors = true;\r\n        });\r\n        if (flag) setIsWin(true);\r\n        setCheckErr(errors);\r\n    }\r\n\r\n    function playAgain() {\r\n        setIsWin(false);\r\n        setRows(sudokuRender(3));\r\n        setCheckErr(false);\r\n    }\r\n\r\n    function render() {\r\n        let div = [], rowHtml = [];\r\n        rows.forEach((row, indexRow) => {\r\n            row.forEach((cell, indexCell) => {\r\n                rowHtml.push(\r\n                    <button id={`btn_${cell.num}`} key={cell.num} className=\"num_button card box\"\r\n                            disabled={cell.cantChange}\r\n                            aria-owns={anchorEl ? 'menu' : undefined}\r\n                            aria-haspopup=\"true\"\r\n                            onClick={(e) => handleOpen(e, indexRow, indexCell)}>\r\n                        {cell.text}\r\n                    </button>\r\n                );\r\n            });\r\n            div.push(<div className=\"row\" key={indexRow}>{rowHtml}</div>);\r\n            rowHtml = [];\r\n        });\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"levelsHeader\">\r\n                    {\r\n                        levels.map(level =>\r\n                            <button className={level.id === selectLevel ? 'selectLevelBtn niceBtn' : 'niceBtn'} key={level.id}\r\n                                    onClick={() => changeLevel(level.id)}>\r\n                                {level.text}\r\n                            </button>\r\n                        )\r\n                    }\r\n                    <div className=\"spacer\"/>\r\n                    <button className=\"helpBtn\" onClick={() => setShowHelp(!showHelp)}>\r\n                        <Icon className=\"helpIcon\" path={mdiHelpCircle}/>\r\n                    </button>\r\n                </div>\r\n                {\r\n                    showHelp ?\r\n                        <header className=\"App-header helpHeader\">\r\n                            Надо заполнить свободные клетки цифрами от 1 до 9 так,\r\n                            чтобы в каждой строке, в каждом столбце и в каждом малом квадрате 3×3\r\n                            каждая цифра встречалась бы только один раз\r\n                            <button className=\"helpBtn\" onClick={() => setShowHelp(!showHelp)}>\r\n                                <Icon className=\"helpIcon\" path={mdiClose}/>\r\n                            </button>\r\n                        </header>\r\n                        :\r\n                        <div>\r\n                            {\r\n                                isWin ?\r\n                                    <header className=\"App-header\">\r\n                                        YOU WIN!\r\n                                        <button className=\"niceBtn\" onClick={playAgain}>PLAY AGAIN</button>\r\n                                    </header>\r\n                                    :\r\n                                    <header className=\"App-header\">\r\n                                        <div className={checkErrors ? 'errorTable' : 'table'}>\r\n                                            { div }\r\n                                        </div>\r\n                                        <Menu\r\n                                            id=\"menu\"\r\n                                            anchorEl={anchorEl}\r\n                                            open={openMenu}\r\n                                            onClose={() => handleClose(null)}\r\n                                        >\r\n                                            <div>\r\n                                                {\r\n                                                    menuOptions.map(row =>\r\n                                                        <div className=\"row\" key={row}>\r\n                                                            {\r\n                                                                row.map(item => <MenuItem key={item}\r\n                                                                                          onClick={() => handleClose(item)}>{item}</MenuItem>)\r\n                                                            }\r\n                                                        </div>\r\n                                                    )\r\n                                                }\r\n                                                <button className=\"iconEraserBtn\" onClick={() => handleClose(-1)}>\r\n                                                    <Icon className=\"iconEraser\" path={mdiEraserVariant}/>\r\n                                                </button>\r\n                                            </div>\r\n                                        </Menu>\r\n                                        <div className=\"border vertical left\"/>\r\n                                        <div className=\"border vertical right\"/>\r\n                                        <div className=\"border horizontal top\"/>\r\n                                        <div className=\"border horizontal bottom\"/>\r\n                                    </header>\r\n                            }\r\n                        </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return render();\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}